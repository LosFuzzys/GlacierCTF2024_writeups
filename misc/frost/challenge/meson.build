project('subroutine', 'c', version : '0.6.9')

add_languages('fortran', native: false)

# Import Python module
py3 = import('python').find_installation(pure: false)
py3_dep = py3.dependency()

# Obtain NumPy include directories
incdir_numpy = run_command(py3,
  ['-c', 'import numpy; print(numpy.get_include())'],
  check : true
).stdout().strip()

# Obtain F2PY include directories
incdir_f2py = run_command(py3,
    ['-c', 'import numpy.f2py; print(numpy.f2py.get_include())'],
    check : true
).stdout().strip()

# Define include directories for Meson
inc_np = include_directories(incdir_numpy, incdir_f2py)

# Path to fortranobject.c generated by F2PY
fortranobject_c = incdir_f2py / 'fortranobject.c'

# Compile fortranobject.c into a static library
fortranobject_lib = static_library('_fortranobject',
  fortranobject_c,
  dependencies: py3_dep,
  include_directories: inc_np,
)

# Declare dependency on the fortranobject library
fortranobject_dep = declare_dependency(
  link_with: fortranobject_lib,
  include_directories: inc_np,
)

# List of Fortran source files
fortran_sources = [
  'subroutine.f90',
]

f2py = [py3, '-m', 'numpy.f2py', '@INPUT@', '--build-dir', '@OUTDIR@', '--lower']

# Custom target to generate C and Fortran wrappers using the .pyf file
subr_sources = custom_target(
  input : fortran_sources,
  output : ['subrmodule.c', 'subr-f2pywrappers.f'],
  command : f2py + [
    '-m', 'subr',
  ],
)

# Define the Python extension module, including the Fortran sources
py3.extension_module(
  'subr',
  sources: [subr_sources , fortran_sources],
  dependencies: [fortranobject_dep, py3_dep],
  include_directories: [inc_np, include_directories('.') ],
  install : true,
)
